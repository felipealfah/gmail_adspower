from enum import Enum
from dataclasses import dataclass
from typing import Optional
import time
import logging
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException

from .exceptions import (
    PhoneVerificationError,
    SMSServiceError,
    ElementInteractionError
)
from .config import timeouts
from .locators import phone_locators

logger = logging.getLogger(__name__)


class VerificationState(Enum):
    """Estados poss√≠veis da verifica√ß√£o de n√∫mero."""
    INITIAL = "initial"
    NUMBER_REQUESTED = "number_requested"
    NUMBER_RECEIVED = "number_received"
    NUMBER_SUBMITTED = "number_submitted"
    WAITING_SMS = "waiting_sms"
    SMS_RECEIVED = "sms_received"
    RESENDING_SMS = "resending_sms"
    FAILED_SMS = "failed_sms"
    COMPLETED = "completed"
    FAILED = "failed"


@dataclass
class ActivationInfo:
    """Informa√ß√µes da ativa√ß√£o atual."""
    activation_id: str
    phone_number: str
    country_code: str
    start_time: float
    state: VerificationState
    attempts: int = 0
    max_lifetime: int = 1200  # 20 minutos

    def is_expired(self) -> bool:
        """Verifica se o n√∫mero expirou."""
        return (time.time() - self.start_time) > self.max_lifetime


class PhoneVerification:
    MAX_PHONE_ATTEMPTS = 3  # üîπ M√°ximo de tentativas por pa√≠s

    def __init__(self, driver, sms_api):
        self.driver = driver
        self.sms_api = sms_api
        self.wait = WebDriverWait(driver, timeouts.DEFAULT_WAIT)
        self.current_activation: Optional[ActivationInfo] = None
        self.failed_numbers = set()
        self.used_countries = set()
        self.state = VerificationState.INITIAL
        self._available_numbers = {}
        self.phone_number = None
        self.phone_manager = None  # Inicialize o gerenciador de n√∫meros
        self.predefined_number = None
        self.predefined_country_code = None
        self.predefined_activation_id = None

    def handle_verification(self) -> bool:
        """Processo principal de verifica√ß√£o de telefone com tratamento robusto de erro."""
        try:
            logger.info("üìû Iniciando processo de verifica√ß√£o de telefone...")

            if not self._check_phone_screen():
                logger.info(
                    "üìå Tela de verifica√ß√£o de telefone n√£o encontrada.")
                return True

            if not self._validate_initial_conditions():
                return False

            # Contador de tentativas expl√≠cito
            attempt_count = 0
            success = False

            while attempt_count < self.MAX_PHONE_ATTEMPTS:
                attempt_count += 1
                logger.info(
                    f"üîÑ Tentativa {attempt_count} de {self.MAX_PHONE_ATTEMPTS} para verifica√ß√£o de telefone")

                # Garantir que estamos na tela correta antes de cada tentativa
                if attempt_count > 1:  # N√£o precisa na primeira tentativa pois j√° verificamos acima
                    if not self._ensure_phone_verification_screen():
                        logger.error(
                            "‚ùå N√£o foi poss√≠vel acessar a tela de verifica√ß√£o de telefone.")
                        continue  # Tenta a pr√≥xima itera√ß√£o

                try:
                    # Se conseguir concluir um ciclo completo, retorna sucesso
                    if self._try_verification_cycle():
                        logger.info(
                            f"‚úÖ Verifica√ß√£o conclu√≠da com sucesso na tentativa {attempt_count}")
                        success = True
                        break

                    # Se chegou aqui, a tentativa falhou mas de forma controlada
                    logger.warning(
                        f"‚ö†Ô∏è Tentativa {attempt_count} falhou. {'Tentando novamente...' if attempt_count < self.MAX_PHONE_ATTEMPTS else 'Sem mais tentativas.'}")

                except Exception as e:
                    # Captura qualquer exce√ß√£o n√£o tratada durante o ciclo
                    logger.error(
                        f"‚ùå Erro na tentativa {attempt_count}: {str(e)}")
                    # Continua para a pr√≥xima tentativa se ainda houver tentativas restantes

                # Pequena pausa entre tentativas
                if attempt_count < self.MAX_PHONE_ATTEMPTS:
                    time.sleep(2)

            if not success:
                logger.error(
                    f"üö® Todas as {self.MAX_PHONE_ATTEMPTS} tentativas de verifica√ß√£o falharam.")
                return False

            return success

        except Exception as e:
            logger.error(f"‚ùå Erro geral na verifica√ß√£o de telefone: {str(e)}")
            # N√£o cancelar o n√∫mero aqui se a verifica√ß√£o foi bem-sucedida
            if self.state != VerificationState.COMPLETED:
                self._cancel_current_number()
            return False
        finally:
            self._ensure_final_cleanup()

    def _validate_initial_conditions(self) -> bool:
        """Valida condi√ß√µes antes de iniciar a verifica√ß√£o."""
        try:
            balance = self.sms_api.get_balance()
            if balance is None or balance <= 0:
                logger.error("‚ö†Ô∏è Saldo insuficiente para verifica√ß√£o.")
                return False

            if not self._check_number_availability():
                logger.error("‚ö†Ô∏è Nenhum n√∫mero dispon√≠vel.")
                return False

            return True
        except Exception as e:
            logger.error(f"‚ùå Erro na valida√ß√£o inicial: {str(e)}")
            return False

    def _check_phone_screen(self) -> bool:
        """Verifica se a tela de verifica√ß√£o de telefone est√° presente."""
        try:
            self.wait.until(EC.presence_of_element_located(
                (By.XPATH, phone_locators.PHONE_INPUT)))
            logger.info("‚úÖ Tela de verifica√ß√£o de telefone detectada.")
            return True
        except TimeoutException:
            return False

    def _ensure_phone_verification_screen(self, max_attempts=2) -> bool:
        """Garante que estamos na tela de verifica√ß√£o de telefone."""
        for attempt in range(max_attempts):
            try:
                # Primeiro verificar se j√° estamos na tela correta usando o m√©todo existente
                if self._check_phone_screen():
                    logger.info(
                        "üì± J√° estamos na tela de verifica√ß√£o de telefone. Continuando...")
                    return True

                # Se n√£o estiver na tela correta, verificar URL atual
                current_url = self.driver.current_url
                logger.warning(f"‚ö†Ô∏è URL atual: {current_url}")

                # Tentar navegar para a URL correta - esta pode precisar ser ajustada
                # dependendo de como seu fluxo de cria√ß√£o de conta funciona
                self.driver.get(
                    "https://accounts.google.com/signup/v2/webgradsidvphone")
                time.sleep(5)

                # Verificar novamente se estamos na tela correta
                if self._check_phone_screen():
                    logger.info(
                        "üì± Navega√ß√£o bem-sucedida para a tela de verifica√ß√£o de telefone.")
                    return True

                # Se ainda n√£o estiver na tela correta, tentar outra abordagem
                logger.warning(
                    f"‚ö†Ô∏è Tentativa {attempt+1}: Ainda n√£o estamos na tela de verifica√ß√£o de telefone.")

                # Verificar se h√° bot√µes "Next" ou "Continue" que podem nos levar √† pr√≥xima tela
                next_buttons = [
                    "//span[contains(text(),'Next')]",
                    "//span[contains(text(),'Continue')]",
                    "//button[contains(@class, 'VfPpkd-LgbsSe')]"
                ]

                for button_xpath in next_buttons:
                    try:
                        if self._element_exists(button_xpath, timeout=2):
                            logger.info(
                                f"üîç Bot√£o encontrado: {button_xpath}. Tentando clicar...")
                            self.driver.find_element(
                                By.XPATH, button_xpath).click()
                            time.sleep(3)
                            if self._check_phone_screen():
                                return True
                    except:
                        continue

            except Exception as e:
                logger.warning(
                    f"‚ö†Ô∏è Erro ao tentar garantir tela de verifica√ß√£o: {str(e)}")
                if attempt < max_attempts - 1:
                    time.sleep(2)  # Pequena pausa antes da pr√≥xima tentativa

        logger.error(
            "‚ùå N√£o foi poss√≠vel garantir que estamos na tela de verifica√ß√£o de telefone.")
        return False  # Falha ap√≥s todas as tentativas

    def _check_number_availability(self) -> bool:
        """Verifica se h√° n√∫meros dispon√≠veis nos pa√≠ses selecionados."""
        try:
            available_numbers = {}

            for country_code, country_name in self.sms_api.selected_countries.items():
                if country_code in self.used_countries:
                    continue

                status = self.sms_api.get_number_status(
                    country=country_code, service="go")
                available_count = status.get(
                    "go", 0) if isinstance(status, dict) else status

                if available_count > 0:
                    available_numbers[country_code] = {
                        'count': available_count, 'country_name': country_name}
                    logger.info(
                        f"{country_name}: {available_count} dispon√≠veis.")

            if not available_numbers:
                return False

            self._available_numbers = available_numbers
            return True

        except Exception as e:
            logger.error(
                f"‚ùå Erro ao verificar disponibilidade de n√∫meros: {str(e)}")
            return False

    def _get_new_number(self) -> Optional[ActivationInfo]:
        """Obt√©m um novo n√∫mero de telefone, tentando v√°rios pa√≠ses se necess√°rio."""
        try:
            # Filtrar pa√≠ses ainda dispon√≠veis
            available_countries = [
                code for code in self.sms_api.selected_countries.keys()
                if code not in self.used_countries
            ]

            if not available_countries:
                logger.error(
                    "üö® Todos os pa√≠ses foram usados. Nenhum n√∫mero dispon√≠vel.")
                return None

            # Buscar pre√ßos dos pa√≠ses dispon√≠veis
            prices = self.sms_api.get_prices(service="go")
            if not prices:
                return None

            # Criar lista de pre√ßos dos pa√≠ses dispon√≠veis
            filtered_prices = [
                {
                    'country_code': country,
                    'country_name': self.sms_api.selected_countries[country],
                    'price': float(prices[country]["go"]["cost"])
                }
                for country in available_countries
                if country in prices
                and "go" in prices[country]
            ]

            if not filtered_prices:
                logger.error(
                    "üö® Nenhum n√∫mero dispon√≠vel nos pa√≠ses restantes.")
                return None

            # Ordenar pa√≠ses pelo pre√ßo (do mais barato para o mais caro)
            filtered_prices.sort(key=lambda x: x['price'])

            # Tentar cada pa√≠s na ordem de pre√ßo at√© conseguir um n√∫mero
            for country_info in filtered_prices:
                country_code = country_info['country_code']
                country_name = country_info['country_name']

                logger.info(f"Tentando comprar n√∫mero no pa√≠s: {country_name}")

                activation_id, phone_number = self.sms_api.buy_number(
                    service="go", country=country_code)

                if phone_number:
                    logger.info(
                        f"üìû N√∫mero comprado: {phone_number} ({country_name})")
                    self.phone_number = phone_number
                    return ActivationInfo(
                        activation_id=activation_id,
                        phone_number=phone_number,
                        country_code=country_code,
                        start_time=time.time(),
                        state=VerificationState.NUMBER_RECEIVED
                    )
                else:
                    logger.warning(
                        f"‚ö†Ô∏è Nenhum n√∫mero dispon√≠vel para go no pa√≠s {country_code}.")
                    # Marcar pa√≠s como usado
                    self.used_countries.add(country_code)

            # Se chegou aqui, nenhum pa√≠s tinha n√∫meros dispon√≠veis
            logger.error(
                "‚ùå N√£o foi poss√≠vel obter n√∫mero em nenhum dos pa√≠ses dispon√≠veis.")
            return None

        except Exception as e:
            logger.error(f"Erro ao obter novo n√∫mero: {str(e)}")
            return None

    def _ensure_final_cleanup(self):
        """Garante que qualquer n√∫mero comprado e n√£o utilizado seja cancelado."""
        if self.current_activation:
            logger.info("‚ö†Ô∏è Limpando ativa√ß√£o pendente...")
            self._cancel_number()

    def _cancel_number(self):
        """Cancela o n√∫mero atual e adiciona o pa√≠s √† lista de rejeitados."""
        if self.current_activation:
            try:
                # Se a verifica√ß√£o foi conclu√≠da com sucesso, n√£o cancela o n√∫mero
                if self.state == VerificationState.COMPLETED:
                    logger.info(
                        "‚úÖ Verifica√ß√£o conclu√≠da com sucesso, n√£o cancelando o n√∫mero.")
                    return

                logger.warning(
                    f"‚ö†Ô∏è Tentando cancelar n√∫mero {self.current_activation.phone_number}...")

                # Verificar se o n√∫mero j√° foi usado com sucesso
                if self.state == VerificationState.COMPLETED:
                    logger.info(
                        "‚úÖ N√∫mero j√° usado com sucesso, n√£o √© necess√°rio cancelar.")
                    self.current_activation = None
                    return

                # Tentar cancelar
                response = self.sms_api.set_status(
                    self.current_activation.activation_id, 6)

                # Registrar independentemente do resultado
                self.used_countries.add(self.current_activation.country_code)
                self.current_activation = None

                logger.info("‚úÖ Status do n√∫mero atualizado.")

            except Exception as e:
                logger.warning(
                    f"‚ö†Ô∏è Erro ao cancelar n√∫mero, mas continuando: {str(e)}")
                self.current_activation = None

    def _element_exists(self, xpath, timeout=3):
        """Verifica se um elemento existe na p√°gina com tratamento de erro de seletor inv√°lido."""
        try:
            WebDriverWait(self.driver, timeout).until(
                EC.presence_of_element_located((By.XPATH, xpath))
            )
            return True
        except Exception as e:
            # Verifica se √© um erro de seletor inv√°lido
            if "invalid selector" in str(e) or "SyntaxError" in str(e):
                logger.warning(f"‚ö†Ô∏è XPath inv√°lido: {xpath}")
                return False  # Retorna falso, mas n√£o quebra a execu√ß√£o
            elif isinstance(e, TimeoutException):
                return False  # Elemento n√£o encontrado dentro do timeout
            else:
                logger.warning(
                    f"‚ö†Ô∏è Erro desconhecido ao verificar elemento: {e}")
                return False  # Qualquer outro erro, tamb√©m retorna falso

    def _submit_phone_number(self) -> bool:
        """Submete o n√∫mero de telefone no formul√°rio com tratamento de erros aprimorado."""
        try:
            if not self.current_activation:
                return False

            # Verificar se a p√°gina est√° pronta
            self.wait.until(
                lambda driver: driver.execute_script(
                    "return document.readyState") == "complete"
            )

            # Localizar campo de telefone com retry
            for attempt in range(3):
                try:
                    phone_input = WebDriverWait(self.driver, 5).until(
                        EC.element_to_be_clickable(
                            (By.XPATH, phone_locators.PHONE_INPUT))
                    )
                    break
                except TimeoutException:
                    if attempt == 2:
                        logger.error(
                            "‚ùå Campo de telefone n√£o encontrado ap√≥s 3 tentativas")
                        return False
                    logger.warning(
                        "‚ö†Ô∏è Campo de telefone n√£o encontrado, tentando novamente...")
                    time.sleep(2)

            # Garantir que o campo est√° pronto para input
            self.driver.execute_script(
                "arguments[0].scrollIntoView(true);", phone_input)
            time.sleep(1)

            # Tentar apenas formatos simples para maior confiabilidade
            formats_to_try = [
                self.current_activation.phone_number,  # Formato b√°sico
                # Com c√≥digo de pa√≠s
                f"+{self.current_activation.country_code}{self.current_activation.phone_number}"
            ]

            for attempt, phone_format in enumerate(formats_to_try):
                try:
                    # Limpar e preencher com JS para maior confiabilidade
                    self.driver.execute_script(
                        "arguments[0].value = '';", phone_input)
                    self.driver.execute_script(
                        f"arguments[0].value = '{phone_format}';", phone_input)
                    logger.info(
                        f"üì≤ Tentativa {attempt+1}: Formato de n√∫mero: {phone_format}")

                    # Localizar e clicar no bot√£o Next
                    try:
                        next_button = WebDriverWait(self.driver, 5).until(
                            EC.element_to_be_clickable(
                                (By.XPATH, phone_locators.NEXT_BUTTON))
                        )
                        # Tentar clicar com JS para maior confiabilidade
                        self.driver.execute_script(
                            "arguments[0].click();", next_button)
                        logger.info("‚úÖ Clicado no bot√£o Next com JavaScript")
                    except Exception as e:
                        logger.error(
                            f"‚ùå Erro ao clicar no bot√£o Next: {str(e)}")
                        continue

                    # Aguardar resposta (mais tempo para processamento)
                    time.sleep(7)

                    # Verificar se avan√ßamos para a pr√≥xima tela
                    try:
                        # Se encontrarmos o campo de c√≥digo SMS, o n√∫mero foi aceito
                        code_field = WebDriverWait(self.driver, 3).until(
                            EC.presence_of_element_located(
                                (By.XPATH, phone_locators.CODE_INPUT))
                        )
                        if code_field.is_displayed():
                            logger.info(
                                "‚úÖ N√∫mero aceito! Campo de c√≥digo SMS detectado.")
                            return True
                    except TimeoutException:
                        # Se n√£o encontramos o campo de c√≥digo, verificar erro
                        pass

                    # Verificar mensagens de erro espec√≠ficas
                    error_xpath = "/html/body/div[1]/div[1]/div[2]/c-wiz/div/div[2]/div/div/div[1]/form/span/section/div/div/div[2]/div/div[2]/div[2]/div"
                    try:
                        if self._element_exists(error_xpath, timeout=1):
                            error_element = self.driver.find_element(
                                By.XPATH, error_xpath)
                            error_text = error_element.text
                            logger.warning(
                                f"‚ö†Ô∏è Erro detectado: '{error_text}'")
                            continue
                    except:
                        pass

                    # Ver se ainda estamos na tela de telefone
                    if self._element_exists(phone_locators.PHONE_INPUT, timeout=1):
                        logger.warning(
                            "‚ö†Ô∏è Ainda na tela de telefone. N√∫mero rejeitado.")
                        continue

                    # Se chegamos aqui e n√£o detectamos erro ou campo de c√≥digo, verificar a URL
                    current_url = self.driver.current_url
                    if "verifyphone" in current_url:
                        logger.info(
                            "‚úÖ URL indica que avan√ßamos para verifica√ß√£o de telefone")
                        return True

                    logger.info(
                        "‚úÖ Nenhum erro detectado, assumindo que o n√∫mero foi aceito")
                    return True

                except Exception as e:
                    logger.warning(
                        f"‚ö†Ô∏è Erro com formato {phone_format}: {str(e)}")

            # Se tentou todos os formatos e nenhum funcionou
            logger.error("‚ùå Todos os formatos de n√∫mero foram rejeitados")
            self._cancel_number()
            return False

        except Exception as e:
            logger.error(f"‚ùå Erro ao submeter n√∫mero: {str(e)}")
            return False

    # Melhoria no m√©todo _try_verification_cycle para melhor tratamento de erros e terceira tentativa

    def _try_verification_cycle(self) -> bool:
        """Executa um ciclo completo de verifica√ß√£o."""
        try:
            # Adicionar refresh da p√°gina se n√£o for a primeira tentativa
            if self.used_countries:  # Se j√° usou algum pa√≠s, n√£o √© a primeira tentativa
                logger.info(
                    "üîÑ Recarregando a p√°gina antes de nova tentativa...")
                self.driver.refresh()
                time.sleep(5)  # Aguardar carregamento completo da p√°gina

                # Verificar se ainda estamos na tela de verifica√ß√£o de telefone
                if not self._check_phone_screen():
                    logger.warning(
                        "‚ö†Ô∏è Ap√≥s refresh, n√£o estamos na tela de verifica√ß√£o de telefone.")
                    # Tentar redirecionamento?

            # Resto do c√≥digo original continua daqui
            self.current_activation = self._get_new_number()
            if not self.current_activation:
                logger.error("‚ùå Falha ao obter um n√∫mero para verifica√ß√£o.")
                return False

            logger.info(
                f"üìû N√∫mero comprado: {self.current_activation.phone_number} ({self.current_activation.country_code})")

            if not self._submit_phone_number():
                return False  # Se falhar, j√° cancela e tenta outro

            # üîπ **Aguardar e inserir o c√≥digo SMS**
            if not self._handle_sms_verification():
                logger.error("‚ùå Falha na verifica√ß√£o por SMS. Abortando.")
                return False

            return True

        except Exception as e:
            logger.error(f"‚ùå Erro no ciclo de verifica√ß√£o: {str(e)}")
            self._cancel_number()
        return False

    def _check_phone_error(self) -> bool:
        """Verifica se h√° erro ao inserir o n√∫mero de telefone."""
        try:
            error_messages = [
                "This phone number format is not recognized",
                "This phone number has already been used too many times",
                "Please enter a valid phone number"
            ]
            for msg in error_messages:
                if self.wait.until(EC.presence_of_element_located((By.XPATH, f"//div[contains(text(), '{msg}')]"))):
                    logger.warning(f"‚ö†Ô∏è N√∫mero rejeitado: {msg}")
                    return True  # Erro detectado
        except TimeoutException:
            return False  # Nenhum erro detectado

    def _cancel_current_number(self):
        """Cancela o n√∫mero rejeitado e marca o pa√≠s como usado."""
        if not self.current_activation:
            return

        activation_id = self.current_activation.activation_id
        country_code = self.current_activation.country_code

        # üîπ Adicionar o pa√≠s √† lista de usados ANTES de tentar outro n√∫mero
        self.used_countries.add(country_code)
        logger.info(
            f"üö´ Pa√≠s {country_code} adicionado √† lista de usados. Evitaremos esse pa√≠s nas pr√≥ximas tentativas.")

        # üîπ Tentar cancelar o n√∫mero com um pequeno delay
        time.sleep(1)
        try:
            logger.warning(
                f"‚ö†Ô∏è Cancelando n√∫mero {self.current_activation.phone_number}...")
            # Status 6 = Cancelar n√∫mero
            self.sms_api.set_status(activation_id, 6)
            logger.info("‚úÖ N√∫mero cancelado com sucesso.")
        except Exception as e:
            if "BAD_STATUS" in str(e):
                logger.warning(
                    "‚ö†Ô∏è N√£o foi poss√≠vel cancelar o n√∫mero. Continuando...")
            else:
                logger.error(
                    f"‚ùå Erro ao cancelar o n√∫mero {activation_id}: {str(e)}")

        self.current_activation = None  # Resetar ativa√ß√£o

    def _handle_sms_verification(self) -> bool:
        """Aguarda o SMS e insere o c√≥digo de verifica√ß√£o com timeout global."""
        try:
            if not self.current_activation:
                return False

            self.state = VerificationState.WAITING_SMS
            activation_id = self.current_activation.activation_id

            # Definir timeout global para todo o processo de SMS
            sms_process_start = time.time()
            sms_global_timeout = 180  # 3 minutos como timeout total para todo o processo

            logger.info(f"üì© Aguardando SMS para ID {activation_id}...")

            # Aguarda at√© max_attempts para receber o SMS inicialmente
            sms_code = self.sms_api.get_sms_code(
                activation_id,
                max_attempts=6,  # Tenta 6 vezes primeiro (60 segundos)
                interval=10      # Verifica a cada 10 segundos
            )

            # Se n√£o recebeu o SMS no per√≠odo inicial, tenta solicitar novo c√≥digo
            resent_attempt = 0
            max_resent_attempts = 2  # M√°ximo de tentativas de reenvio

            # Verifica se ainda est√° dentro do timeout global
            while (not sms_code and
                   resent_attempt < max_resent_attempts and
                   (time.time() - sms_process_start) < sms_global_timeout):

                resent_attempt += 1
                logger.warning(
                    f"‚ö†Ô∏è SMS n√£o recebido ap√≥s 60 segundos. Tentativa de reenvio #{resent_attempt}...")

                # Verifica se ainda temos tempo dentro do timeout global
                remaining_time = sms_global_timeout - \
                    (time.time() - sms_process_start)
                if remaining_time < 30:  # Se restam menos de 30 segundos, n√£o vale a pena tentar reenvio
                    logger.warning(
                        f"‚è± Tempo restante insuficiente ({remaining_time:.1f}s) para nova tentativa. Abortando.")
                    break

                # Aguarda at√© que o bot√£o esteja habilitado
                logger.info(
                    "üïí Aguardando bot√£o 'Get a new Code' ficar habilitado...")

                # Calcula tempo m√°ximo de espera pelo bot√£o baseado no tempo restante
                # N√£o espera mais que 25s ou metade do tempo restante
                wait_time = min(25, remaining_time / 2)
                time.sleep(wait_time)

                # Verifica se ainda temos tempo dentro do timeout global
                if (time.time() - sms_process_start) >= sms_global_timeout:
                    logger.warning(
                        "‚è± Timeout global atingido durante espera pelo bot√£o. Abortando.")
                    break

                # Tentar m√∫ltiplos seletores para o bot√£o de reenvio
                get_new_code_buttons = [
                    phone_locators.GET_NEW_CODE_BUTTON_ALT,
                    "//button[contains(., 'Get a new code')]",
                    "//button[contains(text(), 'Get a new code')]",
                    "//div[contains(@class, 'VfPpkd-RLmnJb')]//span[contains(text(), 'Get a new code')]/ancestor::button",
                    "//span[text()='Get a new code']/parent::button",
                    "//button[contains(@class, 'VfPpkd-LgbsSe') and contains(., 'new code')]"
                ]

                button_clicked = False
                for button_xpath in get_new_code_buttons:
                    try:
                        logger.info(
                            f"üîç Tentando localizar bot√£o usando seletor: {button_xpath}")

                        # Tentativa com wait mais curto para cada seletor
                        get_new_code_button = WebDriverWait(self.driver, 2).until(
                            EC.element_to_be_clickable(
                                (By.XPATH, button_xpath))
                        )

                        # Adiciona verifica√ß√£o de visibilidade e habilita√ß√£o
                        if not get_new_code_button.is_displayed() or not get_new_code_button.is_enabled():
                            logger.warning(
                                f"‚ö†Ô∏è Bot√£o encontrado mas n√£o est√° vis√≠vel ou habilitado ainda.")
                            continue

                        logger.info("‚úÖ Bot√£o 'Get a new Code' encontrado!")

                        # Rola para garantir visibilidade
                        self.driver.execute_script(
                            "arguments[0].scrollIntoView({block: 'center'});", get_new_code_button)
                        time.sleep(1)

                        # Tenta v√°rias estrat√©gias de clique
                        # Tenta at√© 3 vezes com diferentes estrat√©gias
                        for click_attempt in range(3):
                            try:
                                if click_attempt == 0:
                                    # Estrat√©gia 1: Clique direto
                                    get_new_code_button.click()
                                    logger.info(
                                        "‚úÖ Clicou no bot√£o 'Get a new Code' usando .click()")
                                    button_clicked = True
                                    break
                                elif click_attempt == 1:
                                    # Estrat√©gia 2: Clique JavaScript
                                    self.driver.execute_script(
                                        "arguments[0].click();", get_new_code_button)
                                    logger.info(
                                        "‚úÖ Clicou no bot√£o 'Get a new Code' usando JavaScript")
                                    button_clicked = True
                                    break
                                else:
                                    # Estrat√©gia 3: Actions chain
                                    from selenium.webdriver.common.action_chains import ActionChains
                                    actions = ActionChains(self.driver)
                                    actions.move_to_element(
                                        get_new_code_button).click().perform()
                                    logger.info(
                                        "‚úÖ Clicou no bot√£o 'Get a new Code' usando ActionChains")
                                    button_clicked = True
                                    break
                            except Exception as click_error:
                                strategy_name = [
                                    "clique direto", "JavaScript", "ActionChains"][click_attempt]
                                logger.warning(
                                    f"‚ö†Ô∏è Estrat√©gia {click_attempt+1} ({strategy_name}) falhou: {click_error}")
                                # Continua para a pr√≥xima estrat√©gia

                        if button_clicked:
                            break  # Sai do loop de seletores se clicou com sucesso

                    except Exception as e:
                        logger.warning(
                            f"‚ö†Ô∏è N√£o encontrou bot√£o com seletor {button_xpath}: {e}")

                # Verifica se ainda temos tempo dentro do timeout global
                if (time.time() - sms_process_start) >= sms_global_timeout:
                    logger.warning(
                        "‚è± Timeout global atingido ap√≥s tentativas de clique. Abortando.")
                    break

                if not button_clicked:
                    logger.error(
                        "‚ùå N√£o foi poss√≠vel encontrar ou clicar no bot√£o 'Get a new Code'")

                    # Estrat√©gia de √∫ltimo recurso: Tente recarregar a p√°gina
                    if resent_attempt == 1:  # Apenas na primeira tentativa de reenvio
                        try:
                            logger.warning(
                                "üîÑ Tentando recarregar a p√°gina como √∫ltimo recurso...")
                            self.driver.refresh()
                            time.sleep(5)
                            continue  # Vai para a pr√≥xima tentativa
                        except:
                            logger.error("‚ùå Falha ao recarregar a p√°gina")
                else:
                    # Ap√≥s clicar com sucesso
                    logger.info("üïí Aguardando processamento ap√≥s clique...")
                    time.sleep(3)

                    # Verifica se ainda temos tempo dentro do timeout global
                    if (time.time() - sms_process_start) >= sms_global_timeout:
                        logger.warning(
                            "‚è± Timeout global atingido ap√≥s processamento de clique. Abortando.")
                        break

                    # Verificar se voltou para tela de telefone ou se ainda est√° na mesma tela
                    try:
                        if self._element_exists(phone_locators.PHONE_INPUT, timeout=3):
                            logger.info(
                                "üìû Retornando para tela de entrada de telefone...")

                            # Reenviar o mesmo n√∫mero
                            if not self._submit_phone_number():
                                logger.error(
                                    "‚ùå Falha ao resubmeter o mesmo n√∫mero.")
                                continue
                        elif self._element_exists(phone_locators.CODE_INPUT, timeout=3):
                            logger.info(
                                "üì≤ Ainda na tela de c√≥digo, aguardando recebimento do SMS...")
                        else:
                            logger.warning(
                                "‚ö†Ô∏è Estado inesperado ap√≥s clicar em reenviar.")
                    except Exception as e:
                        logger.error(
                            f"‚ùå Erro ao verificar estado ap√≥s clique: {e}")

                    # Verifica se ainda temos tempo dentro do timeout global
                    remaining_time = sms_global_timeout - \
                        (time.time() - sms_process_start)
                    if remaining_time < 30:  # N√£o vale a pena esperar novo SMS se restar pouco tempo
                        logger.warning(
                            f"‚è± Tempo restante insuficiente ({remaining_time:.1f}s) para aguardar SMS. Abortando.")
                        break

                    # Calcula m√°ximo de tentativas de SMS baseado no tempo restante
                    # Pelo menos 1, no m√°ximo 6
                    max_sms_attempts = max(1, min(6, int(remaining_time / 15)))

                    # Esperar pelo SMS novamente
                    logger.info(
                        f"üì© Aguardando novo SMS para ID {activation_id} por {max_sms_attempts} tentativas...")
                    sms_code = self.sms_api.get_sms_code(
                        activation_id,
                        max_attempts=max_sms_attempts,
                        interval=10
                    )

            # Se ainda n√£o recebeu o c√≥digo ap√≥s todas as tentativas
            if not sms_code:
                elapsed_time = time.time() - sms_process_start
                logger.error(
                    f"‚ùå N√£o foi poss√≠vel obter c√≥digo SMS ap√≥s {elapsed_time:.1f}s e {resent_attempt} tentativas de reenvio.")
                self._cancel_current_number()
                return False

            logger.info(f"‚úÖ C√≥digo recebido: {sms_code}")

            # Verifica se ainda temos tempo dentro do timeout global
            remaining_time = sms_global_timeout - \
                (time.time() - sms_process_start)
            if remaining_time < 10:  # Precisamos de pelo menos 10 segundos para submeter o c√≥digo
                logger.warning(
                    f"‚è± Tempo restante insuficiente ({remaining_time:.1f}s) para submeter o c√≥digo. Abortando.")
                self._cancel_current_number()
                return False

            # Verificar se o campo de c√≥digo ainda est√° acess√≠vel
            try:
                # Localizar o campo de c√≥digo com retry
                code_input = None
                for attempt in range(3):
                    try:
                        code_input = WebDriverWait(self.driver, 5).until(
                            EC.presence_of_element_located(
                                (By.XPATH, phone_locators.CODE_INPUT))
                        )
                        break
                    except:
                        if attempt == 2:
                            raise
                        logger.warning(
                            f"‚ö†Ô∏è Tentativa {attempt+1} de localizar campo de c√≥digo falhou.")
                        time.sleep(2)

                if not code_input:
                    raise Exception(
                        "Campo de c√≥digo n√£o encontrado ap√≥s m√∫ltiplas tentativas")

                # Limpar e inserir o c√≥digo SEM o espa√ßo adicional
                code_input.clear()
                self.driver.execute_script(
                    f"arguments[0].value = '{sms_code}';", code_input)
                logger.info("‚úÖ C√≥digo inserido no campo.")

                # Clicar no bot√£o "Next" para validar o c√≥digo
                next_button = WebDriverWait(self.driver, 10).until(
                    EC.element_to_be_clickable(
                        (By.XPATH, phone_locators.NEXT_BUTTON))
                )

                # Scroll at√© o bot√£o
                self.driver.execute_script(
                    "arguments[0].scrollIntoView(true);", next_button)
                time.sleep(1)

                # Tentar clicar
                try:
                    next_button.click()
                except:
                    self.driver.execute_script(
                        "arguments[0].click();", next_button)

                logger.info(
                    "‚úÖ Cliquei no bot√£o Next para validar o c√≥digo SMS.")

                # Aguardar processamento
                time.sleep(5)

                # Verificar erros de c√≥digo inv√°lido com escape de aspas e m√∫ltiplas abordagens
                error_messages = [
                    "Wrong code. Try again.",
                    "Code is incorrect",
                    "That code didn't work"  # Este cont√©m uma aspa simples que causa o erro XPath
                ]

                for error_msg in error_messages:
                    try:
                        # M√©todo 1: Usando contains() com aspas duplas (escape para aspas simples)
                        error_msg_escaped = error_msg.replace("'", "\\'")
                        error_xpath = f"//div[contains(text(), \"{error_msg_escaped}\")]"

                        if self._element_exists(error_xpath, timeout=2):
                            logger.warning(
                                f"‚ö†Ô∏è Erro detectado: '{error_msg}'. C√≥digo inv√°lido.")
                            self._cancel_current_number()
                            return False

                        # M√©todo 2: Verifica√ß√£o parcial do texto (sem aspas)
                        if "didn't work" in error_msg:
                            alt_xpath = "//div[contains(text(), 'code') and contains(text(), 'work')]"
                            if self._element_exists(alt_xpath, timeout=1):
                                logger.warning(
                                    f"‚ö†Ô∏è Erro alternativo detectado para: '{error_msg}'")
                                self._cancel_current_number()
                                return False
                    except Exception as e:
                        logger.warning(
                            f"‚ö†Ô∏è Erro ao verificar mensagem de erro '{error_msg}': {e}")
                        # Continua com as outras verifica√ß√µes, n√£o falha aqui

                try:
                    # Tenta atualizar o status antes de confirma√ß√£o final
                    # Status 8 = N√∫mero utilizado com sucesso
                    self.sms_api.set_status(activation_id, 8)
                except Exception as e:
                    logger.warning(
                        f"‚ö†Ô∏è Erro ao atualizar status do n√∫mero, mas continuando: {e}")

                self.state = VerificationState.COMPLETED
                logger.info("‚úÖ Verifica√ß√£o de telefone conclu√≠da com sucesso!")

                # Armazenar o n√∫mero ap√≥s a verifica√ß√£o bem-sucedida
                try:
                    if self.phone_manager is not None:
                        self.phone_manager.add_number(
                            phone_number=self.phone_number,
                            country_code=self.current_activation.country_code,
                            activation_id=self.current_activation.activation_id,
                            service="gmail"  # ou outro servi√ßo relevante
                        )
                        logger.info(
                            f"‚úÖ N√∫mero {self.phone_number} armazenado para reutiliza√ß√£o.")
                    else:
                        logger.warning(
                            "‚ö†Ô∏è phone_manager n√£o est√° inicializado, n√£o foi poss√≠vel armazenar o n√∫mero.")
                except Exception as e:
                    logger.warning(
                        f"‚ö†Ô∏è Erro ao armazenar o n√∫mero, mas continuando: {e}")

                return True

            except Exception as e:
                logger.error(f"‚ùå Erro na verifica√ß√£o SMS: {str(e)}")
                self._cancel_current_number()
                return False

        except Exception as e:
            logger.error(f"‚ùå Erro na verifica√ß√£o SMS: {str(e)}")
            self._cancel_current_number()
            return False

    def get_current_phone_data(self):
        """Retorna os dados atuais do telefone em uso."""
        if self.current_activation:
            return {
                'phone_number': self.current_activation.phone_number,
                'country_code': self.current_activation.country_code,
                'activation_id': self.current_activation.activation_id,
                'country_name': self.sms_api.selected_countries.get(
                    self.current_activation.country_code,
                    "unknown"
                )
            }
        return None
