from enum import Enum
from dataclasses import dataclass
import time
import logging
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException

from .exceptions import (
    TermsAcceptanceError,
    ElementInteractionError,
    NavigationError
)
from .config import timeouts
from .locators import terms_locators

logger = logging.getLogger(__name__)


class TermsState(Enum):
    """Estados poss√≠veis do processo de aceita√ß√£o dos termos."""
    INITIAL = "initial"
    TERMS_PAGE = "terms_page"
    TERMS_ACCEPTED = "terms_accepted"
    CONFIRMATION_HANDLED = "confirmation_handled"
    RECOVERY_SKIPPED = "recovery_skipped"
    REVIEW_COMPLETED = "review_completed"
    COMPLETED = "completed"
    FAILED = "failed"


@dataclass
class TermsInfo:
    """Armazena informa√ß√µes sobre o processo de aceita√ß√£o dos termos."""
    state: TermsState = TermsState.INITIAL
    terms_accepted: bool = False
    confirmation_handled: bool = False
    recovery_skipped: bool = False
    review_completed: bool = False
    attempts: int = 0
    max_attempts: int = 3


class TermsHandler:
    """
    Gerencia o processo de aceita√ß√£o de termos e revis√£o de conta.
    Respons√°vel por aceitar os termos de uso e pular etapas opcionais.
    """

    def __init__(self, driver):
        self.driver = driver
        self.wait = WebDriverWait(driver, timeouts.DEFAULT_WAIT)
        self.terms_info = TermsInfo()
        self.max_retries = 3
        self.retry_delay = 2

    def handle_terms_acceptance(self) -> bool:
        """Processo principal de aceita√ß√£o dos termos com l√≥gica revisada."""
        try:
            logger.info("üìÑ Iniciando processo ap√≥s verifica√ß√£o de telefone...")
            time.sleep(3)  # Aguardar carregamento completo da p√°gina

            # 1. Primeiro etapa: pular email de recupera√ß√£o e tela de revis√£o
            if not self._skip_recovery_email():
                logger.warning(
                    "‚ö†Ô∏è Poss√≠vel problema ao pular email de recupera√ß√£o, mas continuando...")

            if not self._handle_review_page():
                logger.warning(
                    "‚ö†Ô∏è Poss√≠vel problema na tela de revis√£o, mas continuando...")

            time.sleep(3)  # Aguardar carregamento

            # 2. Clicar no bot√£o "I agree" na tela de termos
            logger.info(
                "üìå Tentando clicar no bot√£o 'I agree' na tela de termos...")
            if self._click_agree_button():
                logger.info("‚úÖ Bot√£o 'I agree' clicado com sucesso!")
            else:
                logger.warning(
                    "‚ö†Ô∏è Bot√£o 'I agree' n√£o encontrado ou n√£o clicado.")
                return False  # Se n√£o clicar, falha no processo

            # 3. Verificar se a tela "Privacy and Terms" carrega
            logger.info("üìå Tentando verificar tela 'Privacy and Terms'...")
            if self._handle_privacy_and_terms_screen():
                logger.info("‚úÖ Tela 'Privacy and Terms' tratada com sucesso!")
                return True  # Se a tela carregar e o bot√£o for clicado, sucesso

            logger.warning(
                "‚ö†Ô∏è Tela 'Privacy and Terms' n√£o encontrada, verificando modal de confirma√ß√£o...")

            # 4. Verificar se h√° um modal de confirma√ß√£o
            logger.info("üìå Tentando verificar modal de confirma√ß√£o...")
            if self._handle_confirmation_modal():
                logger.info("‚úÖ Modal de confirma√ß√£o tratado com sucesso!")
                return True

            logger.warning(
                "‚ö†Ô∏è Modal de confirma√ß√£o n√£o encontrado, verificando checkboxes...")

            # 5. Verificar se estamos na tela com checkboxes
            if self._is_checkbox_terms_screen():
                logger.info("‚úÖ Detectada tela de termos com checkboxes")

                # Tentar marcar os checkboxes e clicar no bot√£o
                if self._handle_checkbox_terms():
                    logger.info(
                        "‚úÖ Termos com checkboxes tratados com sucesso!")
                    return True
                else:
                    logger.error("‚ùå Falha ao tratar checkboxes")

            logger.error(
                "‚ùå Nenhum modal de confirma√ß√£o, checkboxes ou tela 'Privacy and Terms' encontrados.")
            return False

        except Exception as e:
            logger.error(
                f"‚ùå Erro durante processo de aceita√ß√£o de termos: {str(e)}")
            raise TermsAcceptanceError(
                f"Falha no processo de aceita√ß√£o de termos: {str(e)}")

    def _is_checkbox_terms_screen(self) -> bool:
        """Verifica se estamos na tela de termos com checkboxes."""
        try:
            # Procura por textos espec√≠ficos que indicam a tela de checkboxes
            checkbox_indicators = [
                "//div[contains(text(), 'Concordo com')]",
                "//div[contains(text(), 'I agree to')]",
                "//div[contains(text(), 'Estoy de acuerdo con')]",
                "//span[contains(text(), 'Concordo com')]"
            ]

            # Verificar a presen√ßa de elementos de checkbox
            checkbox_inputs = [
                terms_locators.TERMS_CHECKBOX1,
                terms_locators.TERMS_CHECKBOX2,
                terms_locators.TERMS_CHECKBOX3
            ]

            # Verificar indicadores de texto
            for indicator in checkbox_indicators:
                if self._element_exists(indicator, timeout=2):
                    logger.info(
                        f"‚úÖ Indicador de texto para checkboxes encontrado: {indicator}")
                    return True

            # Verificar elementos de checkbox
            for checkbox in checkbox_inputs:
                if self._element_exists(checkbox, timeout=2):
                    logger.info(
                        f"‚úÖ Elemento de checkbox encontrado: {checkbox}")
                    return True

            logger.info(
                "üìå N√£o foram encontrados indicadores de tela de checkboxes")
            return False

        except Exception as e:
            logger.error(f"‚ùå Erro ao verificar tela de checkboxes: {str(e)}")
            return False

    def _handle_checkbox_terms(self) -> bool:
        """Manipula especificamente os checkboxes e bot√£o da tela de termos."""
        try:
            logger.info("üìå Tentando marcar checkboxes e confirmar termos...")

            # Marcar cada checkbox, com foco nos elementos de label (mais clic√°veis)
            checkboxes_marked = True

            # Lista de poss√≠veis elementos clic√°veis relacionados aos checkboxes
            checkbox_areas = [
                # Primeiro, tentar elementos de label (geralmente mais f√°ceis de clicar)
                "//div[contains(text(), 'Concordo com')]/preceding::label[1]",
                "//div[contains(text(), 'Concordo com')]/ancestor::label",
                "//span[contains(text(), 'Concordo com')]/preceding::label[1]",
                "//span[contains(text(), 'Concordo com')]/ancestor::label",
                # Depois, tentar elementos de checkbox espec√≠ficos
                terms_locators.TERMS_CHECKBOX1,
                terms_locators.TERMS_CHECKBOX2,
                terms_locators.TERMS_CHECKBOX3
            ]

            # Tentar clicar em cada √°rea
            for area_xpath in checkbox_areas:
                if self._element_exists(area_xpath, timeout=2):
                    try:
                        # Tentar obter o elemento
                        element = self.driver.find_element(
                            By.XPATH, area_xpath)

                        # Scrollar at√© o elemento
                        self.driver.execute_script(
                            "arguments[0].scrollIntoView({block: 'center'});", element)
                        time.sleep(1)

                        # Tentar clicar com diferentes m√©todos
                        try:
                            # M√©todo 1: Clique direto
                            element.click()
                            logger.info(
                                f"‚úÖ Clique direto bem-sucedido em: {area_xpath}")
                        except Exception as e1:
                            logger.warning(
                                f"‚ö†Ô∏è Clique direto falhou: {str(e1)}")
                            try:
                                # M√©todo 2: Clique via JavaScript
                                self.driver.execute_script(
                                    "arguments[0].click();", element)
                                logger.info(
                                    f"‚úÖ Clique via JavaScript bem-sucedido em: {area_xpath}")
                            except Exception as e2:
                                logger.error(
                                    f"‚ùå Ambos os m√©todos de clique falharam para: {area_xpath}")
                                checkboxes_marked = False
                    except Exception as e:
                        logger.error(
                            f"‚ùå Erro ao interagir com elemento {area_xpath}: {str(e)}")
                        checkboxes_marked = False

            # Se n√£o conseguiu marcar todos os checkboxes, registrar erro
            if not checkboxes_marked:
                logger.warning(
                    "‚ö†Ô∏è Problemas ao marcar alguns checkboxes, mas continuando...")

            # Tentar clicar no bot√£o de confirma√ß√£o
            button_clicked = False
            confirm_button_xpaths = [
                terms_locators.TERMS_CONFIRM_BUTTON,
                "//button[contains(text(), 'Concordo')]",
                "//button[contains(text(), 'I agree')]",
                "//button[contains(text(), 'Aceitar')]",
                "//button[contains(@class, 'VfPpkd-LgbsSe')]"
            ]

            for button_xpath in confirm_button_xpaths:
                if self._element_exists(button_xpath, timeout=2):
                    try:
                        button = self.driver.find_element(
                            By.XPATH, button_xpath)

                        # Scrollar at√© o bot√£o
                        self.driver.execute_script(
                            "arguments[0].scrollIntoView({block: 'center'});", button)
                        time.sleep(1)

                        # Tentar clicar
                        try:
                            button.click()
                            logger.info(
                                f"‚úÖ Clique direto no bot√£o: {button_xpath}")
                            button_clicked = True
                            break
                        except Exception as e1:
                            logger.warning(
                                f"‚ö†Ô∏è Clique direto no bot√£o falhou: {str(e1)}")
                            try:
                                self.driver.execute_script(
                                    "arguments[0].click();", button)
                                logger.info(
                                    f"‚úÖ Clique via JavaScript no bot√£o: {button_xpath}")
                                button_clicked = True
                                break
                            except Exception as e2:
                                logger.error(
                                    f"‚ùå Ambos os m√©todos de clique falharam para o bot√£o: {button_xpath}")
                    except Exception as e:
                        logger.error(
                            f"‚ùå Erro ao interagir com bot√£o {button_xpath}: {str(e)}")

            if not button_clicked:
                logger.error(
                    "‚ùå N√£o foi poss√≠vel clicar no bot√£o de confirma√ß√£o")
                return False

            # Aguardar para ver se avan√ßamos
            time.sleep(5)

            # Verificar se ainda estamos na mesma tela
            # Usar apenas os primeiros indicadores de texto
            for area_xpath in checkbox_areas[:4]:
                if self._element_exists(area_xpath, timeout=2):
                    logger.error(
                        "‚ùå Ainda estamos na tela de checkboxes. O processo n√£o avan√ßou.")
                    return False

            logger.info("‚úÖ Avan√ßamos da tela de checkboxes com sucesso!")
            return True

        except Exception as e:
            logger.error(f"‚ùå Erro ao manipular checkboxes: {str(e)}")
            return False

    def _element_exists(self, xpath, timeout=3):
        """Verifica se um elemento existe na p√°gina."""
        try:
            WebDriverWait(self.driver, timeout).until(
                EC.presence_of_element_located((By.XPATH, xpath))
            )
            return True
        except TimeoutException:
            return False

    def _execute_with_retry(self, func) -> bool:
        """Executa uma fun√ß√£o com sistema de retry."""
        for attempt in range(self.max_retries):
            try:
                func()
                return True
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Tentativa {attempt + 1} falhou: {str(e)}")
                if attempt < self.max_retries - 1:
                    time.sleep(self.retry_delay)
                    continue
                return False

    def _accept_terms(self) -> bool:
        """Aceita os termos de uso com suporte a m√∫ltiplos formatos de tela."""
        try:
            logger.info("üìå Localizando bot√£o 'Aceitar' nos termos de uso...")

            # Lista de poss√≠veis XPaths para o bot√£o de aceitar
            accept_button_xpaths = [
                # XPath original
                terms_locators.AGREE_BUTTON,
                # Alternativas comuns
                "//button[@aria-label='Aceitar']",
                "//button[contains(text(), 'Aceitar')]",
                "//button[contains(text(), 'Acepto')]",
                "//button[contains(text(), 'Concordo')]",
                "//button[contains(text(), 'Agree')]",
                "//button[contains(text(), 'I agree')]",
                "//button[@jsname='LgbsSe']",  # ID interno do Google
                "//div[@role='button' and contains(., 'Agree')]",
                "//div[@role='button' and contains(., 'I agree')]"
            ]

            # Tenta cada XPath at√© encontrar um que funcione
            for xpath in accept_button_xpaths:
                try:
                    if self._element_exists(xpath, timeout=2):
                        agree_button = self.driver.find_element(
                            By.XPATH, xpath)
                        if agree_button.is_displayed() and agree_button.is_enabled():
                            logger.info(
                                f"‚úÖ Bot√£o 'Aceitar' encontrado com XPath: {xpath}")

                            # Tenta clicar com JavaScript para maior confiabilidade
                            self.driver.execute_script(
                                "arguments[0].click();", agree_button)
                            time.sleep(2)

                            logger.info("‚úÖ Termos aceitos com sucesso.")
                            self.terms_info.terms_accepted = True
                            return True
                except Exception as e:
                    logger.warning(
                        f"‚ö†Ô∏è Erro ao tentar clicar em {xpath}: {str(e)}")
                    continue

            # Se chegou aqui, nenhum bot√£o foi encontrado
            logger.error("‚ùå Bot√£o de aceite dos termos n√£o encontrado.")
            return False

        except Exception as e:
            logger.error(f"‚ùå Erro ao aceitar termos: {str(e)}")
            return False

    def _handle_confirmation_modal(self) -> bool:
        """Verifica se h√° um modal de confirma√ß√£o e lida com ele."""
        try:
            logger.info("üìå Verificando se h√° um modal de confirma√ß√£o...")

            # Esperar um pouco para o modal aparecer completamente
            time.sleep(2)

            # Tenta encontrar o bot√£o de confirma√ß√£o usando o localizador
            if self._element_exists(terms_locators.CONFIRM_BUTTON, timeout=2):
                confirm_button = self.driver.find_element(
                    By.XPATH, terms_locators.CONFIRM_BUTTON)

                # Rolar at√© o bot√£o para garantir que est√° vis√≠vel
                self.driver.execute_script(
                    "arguments[0].scrollIntoView(true);", confirm_button)
                # Pequena pausa para garantir que o scroll terminou
                time.sleep(1)

                # Clicar no bot√£o de confirma√ß√£o
                confirm_button.click()
                logger.info("‚úÖ Modal de confirma√ß√£o fechado com sucesso.")
                self.terms_info.confirmation_handled = True
                time.sleep(2)  # Espera para processamento
                return True

            logger.info(
                "‚úÖ Nenhum modal de confirma√ß√£o encontrado, continuando...")
            self.terms_info.confirmation_handled = True
            return True

        except Exception as e:
            logger.error(f"‚ùå Erro ao verificar modal de confirma√ß√£o: {str(e)}")
            return False

    def _skip_recovery_email(self) -> bool:
        """Pula a tela de recupera√ß√£o de email."""
        try:
            logger.info("üìå Verificando tela de email de recupera√ß√£o (Skip)...")
            skip_button = self.wait.until(
                EC.element_to_be_clickable(
                    (By.XPATH, terms_locators.RECOVERY_EMAIL_SKIP))
            )
            skip_button.click()
            logger.info("‚úÖ Bot√£o 'Skip' clicado com sucesso.")
            time.sleep(2)  # Pequena pausa

            return True
        except TimeoutException:
            logger.warning(
                "‚ö†Ô∏è Tela de email de recupera√ß√£o n√£o apareceu, continuando...")
            return True  # Continua o fluxo normalmente
        except Exception as e:
            logger.error(
                f"‚ùå Erro ao tentar pular email de recupera√ß√£o: {str(e)}")
            return False

    def _handle_review_page(self) -> bool:
        """Confirma o n√∫mero de telefone na tela de revis√£o."""
        try:
            logger.info("üìå Verificando tela de confirma√ß√£o de telefone...")

            # Lista de poss√≠veis XPaths para o bot√£o Next
            next_button_xpaths = [
                "//span[contains(text(),'Next')]",
                "//span[contains(text(),'Continue')]",
                "//span[contains(text(),'Continuar')]",
                "//button[@type='submit']",
                "//button[contains(@class, 'VfPpkd-LgbsSe')]"
            ]

            # Tenta cada XPath
            button_clicked = False
            for xpath in next_button_xpaths:
                try:
                    if self._element_exists(xpath, timeout=3):
                        next_button = self.driver.find_element(By.XPATH, xpath)
                        if next_button.is_displayed() and next_button.is_enabled():
                            # Tenta clicar no bot√£o com JavaScript para maior confiabilidade
                            self.driver.execute_script(
                                "arguments[0].click();", next_button)
                            time.sleep(2)
                            logger.info(
                                f"‚úÖ Clicou no bot√£o de confirma√ß√£o de telefone: {xpath}")
                            button_clicked = True
                            break
                except Exception as e:
                    logger.warning(
                        f"‚ö†Ô∏è Erro ao clicar em bot√£o {xpath}: {str(e)}")
                    continue

            if not button_clicked:
                logger.warning(
                    "‚ö†Ô∏è Nenhum bot√£o de confirma√ß√£o de telefone clicado, mas continuando...")

            self.terms_info.review_completed = True
            return True

        except Exception as e:
            logger.error(f"‚ùå Erro na tela de revis√£o: {str(e)}")
            return False

    def _click_agree_button(self) -> bool:
        """Clica no bot√£o 'I agree'."""
        try:
            agree_button = self.driver.find_element(
                By.XPATH, terms_locators.AGREE_BUTTON)
            agree_button.click()
            return True
        except Exception as e:
            logger.error(f"‚ùå Erro ao clicar no bot√£o 'I agree': {str(e)}")
            return False

    def _handle_privacy_and_terms_screen(self) -> bool:
        """Verifica e lida com a tela 'Privacy and Terms' e clica no segundo bot√£o 'I agree'."""
        try:
            logger.info(
                "üìå Procurando segundo bot√£o 'I agree' na tela Privacy and Terms...")

            # Aguardar um momento para a tela carregar completamente
            time.sleep(2)

            # Primeiro, tentar o XPath espec√≠fico
            if self._element_exists(terms_locators.SECOND_AGREE_BUTTON, timeout=3):
                second_agree_button = self.driver.find_element(
                    By.XPATH, terms_locators.SECOND_AGREE_BUTTON)

                # Garantir que o bot√£o est√° vis√≠vel
                self.driver.execute_script(
                    "arguments[0].scrollIntoView(true);", second_agree_button)
                time.sleep(1)  # Pequena pausa ap√≥s o scroll

                # Tentar clicar usando JavaScript para maior confiabilidade
                self.driver.execute_script(
                    "arguments[0].click();", second_agree_button)
                logger.info(
                    "‚úÖ Segundo bot√£o 'I agree' clicado com sucesso usando XPath espec√≠fico")
                return True

            # Se n√£o encontrar com o XPath espec√≠fico, tentar o locator gen√©rico
            elif self._element_exists(terms_locators.AGREE_BUTTON, timeout=2):
                agree_button = self.driver.find_element(
                    By.XPATH, terms_locators.AGREE_BUTTON)
                agree_button.click()
                logger.info(
                    "‚úÖ Bot√£o 'I agree' alternativo clicado com sucesso")
                return True

            logger.warning(
                "‚ö†Ô∏è Nenhum bot√£o 'I agree' encontrado na tela Privacy and Terms")
            return False

        except Exception as e:
            logger.error(
                f"‚ùå Erro ao lidar com a tela 'Privacy and Terms': {str(e)}")
            return False